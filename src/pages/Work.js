import React, {useContext} from "react";
import { useNavigate } from "react-router-dom";
import { useLocation } from "react-router-dom";

import { useState, useEffect } from "react";
import axios from "axios";

import MenuBar from "../components/MenuBar";
import './Work.css'

import { WorkerContext } from './WorkerContext';
const port = 9002;

//import DatePicker from "react-datepicker";
//import "react-datepicker/dist/react-datepicker.css";

const Work = () => {
    const navigate = useNavigate();
    const [showAddTodo, setShowAddTodo] = useState(false); // ÏûëÏóÖ Ï∂îÍ∞ÄÏ∞Ω ÌëúÏãú Ïó¨Î∂ÄÎ•º Í¥ÄÎ¶¨ÌïòÎäî ÏÉÅÌÉú
    const [todoList, setTodoList] = useState([]);
    const [startDate, setStartDate] = useState(new Date());
    const [finishDate, setFinishDate] = useState(new Date());
    const { workerID } = useContext(WorkerContext); //  // loginÌïú ÏÇ¨Ïõê Î≤àÌò∏

    const fetchData = async () => {
        const response = await axios.get('http://ec2-3-35-47-9.ap-northeast-2.compute.amazonaws.com:'+port+'/work');
        /*
        if (Array.isArray(response.data)) {
            setTodoList(response.data);
        } else {
            console.error("Unexpected response data:", response.data);
            setTodoList([]); // ÏùëÎãµÏù¥ Î∞∞Ïó¥Ïù¥ ÏïÑÎãå Í≤ΩÏö∞ Îπà Î∞∞Ïó¥Î°ú ÏÑ§Ï†ï
        }*/
        setTodoList(response.data.workinfos);
    };

    const onSubmitHandler = async (e) => {
        e.preventDefault(); // Ìèº Í∏∞Î≥∏ Ï†úÏ∂ú ÎèôÏûë Î∞©ÏßÄ
    
        const workTitle = e.target.workTitle.value;
        const workContent = e.target.workContent.value;
        const workState = e.target.workState.value;
        const startDate = e.target.startDate.value;
        const finishDate = e.target.finishDate.value;
    
        await axios.post('http://ec2-3-35-47-9.ap-northeast-2.compute.amazonaws.com:'+port+'/work', { workTitle, workContent, workState, startDate, finishDate });
        setShowAddTodo(false); // ÏûëÏóÖ Ï∂îÍ∞ÄÏ∞ΩÏùÑ Îã´ÏäµÎãàÎã§.
        fetchData(); // ÏûëÏóÖ Ï∂îÍ∞Ä ÌõÑ ÏûëÏóÖ Î™©Î°ùÏùÑ Îã§Ïãú Î∂àÎü¨ÏòµÎãàÎã§.
    };

    const handleAddTodoClick = () => {
        setShowAddTodo(true); // Î™®Îã¨ Ïó¥Í∏∞
    };

    const handleCloseModal = () => {
        setShowAddTodo(false); // Î™®Îã¨ Îã´Í∏∞
    };

    useEffect(() => {
        fetchData();
    }, []);

    return (
        <div className="container">
            <MenuBar />
            <div className="add-button">
                <button onClick={handleAddTodoClick}>üìñ Ìï† Ïùº +</button>
            </div>
            <div className="add-button2">
                <button>ÏßÑÌñâ Ï§ë</button>
            </div>
            <div className="add-button3">
                <button>ÏôÑÎ£å</button>
            </div>
            <div className="todo-list">
                <div className="form">
                    {todoList?.filter(todo => todo.workState === 0).slice(0, 4).map((todo) => (
                        <div key={todo.workID} className="todo-item">
                            <label>{todo.workTitle}</label>
                            <p>{todo.workContent}</p>
                            {/* <p>{todo.workState}</p>
                            <p>{todo.startDate}</p>
                            <p>{todo.finishDate}</p> */}
                        </div>
                ))}
                </div>
            </div>
            <div className="todo-list-1">
                <div className="form">
                    {todoList?.filter(todo => todo.workState === 1).slice(0, 4).map((todo) => (
                        <div key={todo.workID} className="todo-item">
                            <label>{todo.workTitle}</label>
                            <p>{todo.workContent}</p>
                        </div>
                    ))}
                </div>
            </div>
            <div className="todo-list-2">
                <div className="form">
                    {todoList?.filter(todo => todo.workState === 2).slice(0, 4).map((todo) => (
                        <div key={todo.workID} className="todo-item">
                            <label>{todo.workTitle}</label>
                            <p>{todo.workContent}</p>
                        </div>
                    ))}
                </div>
            </div>
            {showAddTodo && (
                <div className="add-todo">
                    <form onSubmit={onSubmitHandler}>
                        <div className="form-group">
                            <label for = "workTitle">ÏûëÏóÖ Ï†úÎ™©</label>
                            <input required type="text" name="workTitle" />
                        </div>
                        <div className="form-group">
                            <label for = "workState">ÏûëÏóÖ ÏÉÅÌÉú</label>
                            <select required name="workState">
                                <option value="0">Ìï† Ïùº</option>
                                <option value="1">ÏßÑÌñâ Ï§ë</option>
                                <option value="2">ÏôÑÎ£å</option>
                            </select>
                        </div>
                        <div className="form-group">
                            <label for = "startDate">ÏãúÏûëÏùº</label>
                            <input required type="text" name="startDate" />
                        </div>
                        <div className="form-group">
                            <label for = "finishDate">ÏôÑÎ£åÏùº</label>
                            <input required type="text" name="finishDate" />
                        </div>


                        {/* <div className="form-group">
                            <label for="startDate">ÏãúÏûëÏùº</label>
                            <DatePicker
                                selected={startDate} // startDateÎäî stateÎ°ú ÏÑ†Ïñ∏ÎêòÏñ¥Ïïº Ìï©ÎãàÎã§.
                                onChange={date => setStartDate(date)} // startDate ÏÉÅÌÉúÎ•º ÏóÖÎç∞Ïù¥Ìä∏Ìï©ÎãàÎã§.
                            />
                        </div>
                        <div className="form-group">
                            <label for="finishDate">ÏôÑÎ£åÏùº</label>
                            <DatePicker
                                selected={finishDate} // finishDateÎäî stateÎ°ú ÏÑ†Ïñ∏ÎêòÏñ¥Ïïº Ìï©ÎãàÎã§.
                                onChange={date => setFinishDate(date)} // finishDate ÏÉÅÌÉúÎ•º ÏóÖÎç∞Ïù¥Ìä∏Ìï©ÎãàÎã§.
                            />
                        </div> */}


                        <div className="form-group">
                            <label for = "workContent">ÏûëÏóÖ ÎÇ¥Ïö©</label>
                            <textarea required="" cols="50" rows="10" id="workContent" name="workContent"></textarea>
                        </div>

                        <button type="submit" className="form-submit-button">ÏûëÏóÖ Ï∂îÍ∞Ä</button>
                        {/* ÌåùÏóÖ Îã´Í∏∞ Î≤ÑÌäº */}
                    <button type="button" className="form-submit-button" onClick={() => setShowAddTodo(false)}>Ï∞Ω Îã´Í∏∞</button>
                    </form>
                </div>
            )}
        </div>
    );
};

export default Work;